/**
  ******************************************************************************
  * @file    r3_f7xx_pwm_curr_fdbk.h
  * @author  Motor Control SDK Team, ST Microelectronics
  * @brief   This file contains all definitions and functions prototypes for the
  *          r3_f7_pwm_curr_fdbk component of the Motor Control SDK.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  * @ingroup r3_f7XX_pwm_curr_fdbk
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __R3_2_F7XX_PWMNCURRFDBK_H
#define __R3_2_F7XX_PWMNCURRFDBK_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* Includes ------------------------------------------------------------------*/
#include "pwm_curr_fdbk.h"

/** @addtogroup MCSDK
  * @{
  */

/** @addtogroup pwm_curr_fdbk
  * @{
  */

/** @addtogroup r3_f7XX_pwm_curr_fdbk
  * @{
  */

/* Exported types ------------------------------------------------------- */
/**
  * @brief  PWMC_R3_2_F7_Handle_t parameters structure definition
  */
typedef const struct
{
  ADC_TypeDef * ADCx_1;                   /*!< It contains the pointer to the first ADC
                                              used for current reading. */
  ADC_TypeDef * ADCx_2;                   /*!< It contains the pointer to the second ADC
                                              used for current reading. */
  TIM_TypeDef * TIMx;                         /*!< It contains the pointer to the timer
                                                  used for PWM generation. It must
                                                  equal to TIM1 if M1, to TIM8 otherwise */
  GPIO_TypeDef * pwm_en_u_port;           /*!< phase u enable driver signal GPIO port */
  GPIO_TypeDef * pwm_en_v_port;           /*!< phase v enable driver signal GPIO port */
  GPIO_TypeDef * pwm_en_w_port;           /*!< phase w enable driver signal GPIO port */
  uint32_t      pwm_en_u_pin;             /*!< phase u enable driver signal pin */
  uint32_t      pwm_en_v_pin;             /*!< phase v enable driver signal pin */
  uint32_t      pwm_en_w_pin;             /*!< phase w enable driver signal pin */
  volatile uint32_t  *ADCDataReg1[6];     /*!< store ADC data register 1 address for the 6 sectors */
  volatile uint32_t  *ADCDataReg2[6];     /*!< store ADC data register 2 address for the 6 sectors */
  uint32_t ADCConfig1[6];                 /*!< store ADCx_1 sequence for the 6 sectors */
  uint32_t ADCConfig2[6];                 /*!< store ADCx_2 sequence for the 6 sectors */
  /* Dual MC parameters --------------------------------------------------------*/
  uint16_t Tw;                           /*!< It is used for switching the context
                                              in dual MC. It contains biggest delay
                                              (expressed in counter ticks) between
                                              the counter crest and ADC latest trigger */
  uint16_t hTafter;                      /*!< It is the sum of dead time plus max
                                              value between rise time and noise time
                                              express in number of TIM clocks.*/
  uint16_t hTbefore;                     /*!< It is the sampling time express in
                                              number of TIM clocks.*/
  uint16_t hDeadTime;                    /*!< Dead time in number of TIM clock
                                              cycles. If CHxN are enabled, it must
                                              contain the dead time to be generated
                                              by the microcontroller, otherwise it
                                              expresses the maximum dead time
                                              generated by driving network */
  uint8_t  bFreqRatio;                   /*!< It is used in case of dual MC to
                                              synchronize TIM1 and TIM8. It has
                                              effect only on the second instanced
                                              object and must be equal to the
                                              ratio between the two PWM frequencies
                                              (higher/lower). Supported values are
                                              1, 2 or 3 */
  uint8_t  bIsHigherFreqTim;             /*!< When bFreqRatio is greather than 1
                                              this param is used to indicate if this
                                              instance is the one with the highest
                                              frequency. Allowed value are: HIGHER_FREQ
                                              or LOWER_FREQ */
  uint8_t  RepetitionCounter;           /*!< It expresses the number of PWM
                                              periods to be elapsed before compare
                                              registers are updated again. In
                                              particular:
                                              RepetitionCounter= (2* #PWM periods)-1*/
  LowSideOutputsFunction_t LowSideOutputs; /*!< Low side or enabling signals
                                                generation method are defined
                                                here.*/
  FunctionalState EmergencyStop;           /*!< It enable/disable the management of
                                                an emergency input instantaneously
                                                stopping PWM generation. It must be
                                                either equal to ENABLE or DISABLE */
} R3_2_Params_t;
/**
  * @brief  This structure is used to handle an instance of the
  *         r3_f7XX_pwm_curr_fdbk component.
  */
typedef struct
{
  PWMC_Handle_t _Super;     /*!< base component handler   */
  uint32_t PhaseAOffset;   /*!< Offset of Phase A current sensing network  */
  uint32_t PhaseBOffset;   /*!< Offset of Phase B current sensing network  */
  uint32_t PhaseCOffset;   /*!< Offset of Phase C current sensing network  */
  uint32_t ADC_ExternalTriggerInjected; /*!<  external  trigger selection */
  uint32_t ADCTriggerEdge;  /*!<  trigger edge selection */
  uint16_t Half_PWMPeriod;  /* Half PWM Period in timer clock counts */
  uint8_t  CalibSector;       /*!< the space vector sector number during calibration */
  uint8_t  PolarizationCounter; /*!< Number of conversions performed during the
                                              calibration phase*/
  bool OverCurrentFlag;     /*!< This flag is set when an overcurrent occurs.*/
  R3_2_Params_t const *pParams_str;
} PWMC_R3_2_Handle_t;

/* Exported functions ------------------------------------------------------- */

/*  It initializes peripherals for current reading and PWM generation
 *  in three shunts configuration using STM32F7XX *****/
void R3_2_Init( PWMC_R3_2_Handle_t * pHandle );

/**
  * It measures and stores into handler component variables the offset voltage on Ia and
  * Ib current feedback analog channels when no current is flowing into the
  * motor
  */
void R3_2_CurrentReadingCalibration( PWMC_Handle_t * pHdl );

/**
  * It computes and return latest converted motor phase currents motor
  */
void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents );

/**
  * It turns on low sides switches. This function is intended to be
  * used for charging boot capacitors of driving section. It has to be
  * called each motor start-up when using high voltage drivers
  */
void R3_2_TurnOnLowSides( PWMC_Handle_t * pHdl );

/**
  * It enables PWM generation on the proper Timer peripheral acting on MOE
  * bit
  */
void R3_2_SwitchOnPWM( PWMC_Handle_t * pHdl );

/* It disables PWM generation on the proper Timer peripheral acting on
 * MOE bit
 */
void R3_2_SwitchOffPWM( PWMC_Handle_t * pHdl );

/**
  * Configure the ADC for the current sampling during calibration.
  * It means set the sampling point via TIMx_Ch4 value and polarity
  * ADC sequence length and channels.
  */
uint16_t R3_2_SetADCSampPointCalibration( PWMC_Handle_t * pHdl);

/**
  * Configure the ADC for the current sampling related to sector 1.
  * It means set the sampling point via TIMx_Ch4 value and polarity
  * ADC sequence length and channels.
  */
uint16_t R3_2_SetADCSampPointSectX( PWMC_Handle_t * pHdl);

/**
  * It is used to check if an overcurrent occurred since last call.
  */
uint16_t R3_2_IsOverCurrentOccurred( PWMC_Handle_t * pHdl );

/**
  * It is used to enable the PWM mode during RL Detection Mode.
  */
void R3_2_RLDetectionModeEnable( PWMC_Handle_t * pHdl );

/**
  * It is used to disable the PWM mode during RL Detection Mode.
  */
void R3_2_RLDetectionModeDisable( PWMC_Handle_t * pHdl );

/**
  * It is used to set the PWM dutycycle during RL Detection Mode.
  */
uint16_t R3_2_RLDetectionModeSetDuty( PWMC_Handle_t * pHdl, uint16_t hDuty );


/**
  * @brief  It contains the TIMx Update event interrupt
  */
void * R3_2_TIMx_UP_IRQHandler( PWMC_R3_2_Handle_t * pHdl );

/**
 * @brief  It contains the Break event interrupt
 */
void * R3_2_BRK_IRQHandler( PWMC_R3_2_Handle_t * pHdl );

/**
 * @brief  It turns on low sides switches and start ADC triggering.
 *         This function is specific for MP phase.
 */
void RLTurnOnLowSidesAndStart( PWMC_Handle_t * pHdl );


/**
 * @brief  It sets ADC sampling points.
 *         This function is specific for MP phase.
 */
void RLSetADCSampPoint( PWMC_Handle_t * pHdl );

/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

#ifdef __cplusplus
}
#endif /* __cpluplus */

#endif /*__R3_F7XX_PWMNCURRFDBK_H*/

/******************* (C) COPYRIGHT 2019 STMicroelectronics *****END OF FILE****/
